{
	"info": {
		"_postman_id": "4b667df8-5906-4625-9d19-09d62257802a",
		"name": "Quizki API",
		"description": "Complete API collection for QuizKi application with authentication flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39454505"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "question_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "choice_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('user_id', responseJson.id);",
									"    pm.test('User registered successfully', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.test('Response has required fields', function () {",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('username');",
									"        pm.expect(responseJson).to.have.property('email');",
									"        pm.expect(responseJson).to.have.property('role');",
									"    });",
									"} else {",
									"    pm.test('Registration failed with expected error', function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser{{$randomInt}}\",\n    \"email\": \"testuser{{$randomInt}}@example.com\",\n    \"password\": \"testpass123\",\n    \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('access_token', responseJson.access_token);",
									"    pm.test('Login successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.test('Token received', function () {",
									"        pm.expect(responseJson).to.have.property('access_token');",
									"        pm.expect(responseJson.token_type).to.eql('bearer');",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.response.to.have.status(401);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Users",
			"item": [
				{
					"name": "Get All Users (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test('Users are ordered by total_score', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 1) {",
									"        for (let i = 0; i < responseJson.length - 1; i++) {",
									"            pm.expect(responseJson[i].total_score).to.be.at.least(responseJson[i + 1].total_score);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains full user data', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        pm.expect(responseJson[0]).to.have.property('id');",
									"        pm.expect(responseJson[0]).to.have.property('email');",
									"        pm.expect(responseJson[0]).to.have.property('role');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains user data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('username');",
									"    pm.expect(responseJson).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 403', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Response contains user data', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('username');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Questions",
			"item": [
				{
					"name": "Get All Questions (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    if (responseJson.length > 0) {",
									"        pm.collectionVariables.set('question_id', responseJson[0].id);",
									"        if (responseJson[0].choices && responseJson[0].choices.length > 0) {",
									"            pm.collectionVariables.set('choice_id', responseJson[0].choices[0].id);",
									"        }",
									"    }",
									"});",
									"",
									"pm.test('Choices do not show is_correct for public', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0 && responseJson[0].choices) {",
									"        responseJson[0].choices.forEach(choice => {",
									"            pm.expect(choice.is_correct).to.be.null;",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Questions (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Choices show is_correct for admin', function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0 && responseJson[0].choices) {",
									"        responseJson[0].choices.forEach(choice => {",
									"            pm.expect(choice).to.have.property('is_correct');",
									"            pm.expect(choice.is_correct).to.be.a('boolean');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Question by ID (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains question data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('question_text');",
									"    pm.expect(responseJson).to.have.property('choices');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Question (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('question_id', responseJson.id);",
									"    pm.test('Question created successfully', function () {",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('question_text');",
									"        pm.expect(responseJson).to.have.property('choices');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"question_text\": \"What is 2 + 2?\",\n    \"score\": 5.0,\n    \"choices\": [\n        {\n            \"choice_text\": \"3\",\n            \"is_correct\": false\n        },\n        {\n            \"choice_text\": \"4\",\n            \"is_correct\": true\n        },\n        {\n            \"choice_text\": \"5\",\n            \"is_correct\": false\n        },\n        {\n            \"choice_text\": \"6\",\n            \"is_correct\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/questions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Question (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Question updated successfully', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson.question_text).to.include('Updated');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"question_text\": \"Updated: What is 2 + 2?\",\n    \"score\": 10.0,\n    \"choices\": [\n        {\n            \"choice_text\": \"3\",\n            \"is_correct\": false\n        },\n        {\n            \"choice_text\": \"4\",\n            \"is_correct\": true\n        },\n        {\n            \"choice_text\": \"5\",\n            \"is_correct\": false\n        },\n        {\n            \"choice_text\": \"6\",\n            \"is_correct\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Answers",
			"item": [
				{
					"name": "Submit Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Answer submitted successfully', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('id');",
									"        pm.expect(responseJson).to.have.property('score');",
									"        pm.expect(responseJson).to.have.property('user_id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"question_id\": 1,\n    \"choice_id\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/answers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"answers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Answers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my-answers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my-answers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Admin Operations",
			"item": [
				{
					"name": "Delete Question (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Question deleted successfully', function () {",
									"        const responseJson = pm.response.json();",
									"        pm.expect(responseJson).to.have.property('message');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/questions/{{question_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"questions",
								"{{question_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}